<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\FriendStorage.Model\bin\Debug\FriendStorage.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FriendStorage.Model" #>
<#@ output extension=".cs" #>

<# 
    foreach (var modelType in GetModelTypes())
    {
		var simpleProperties = modelType.GetProperties().
								Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string)).ToList();
		var complexProperties = modelType.GetProperties().
								Except(simpleProperties)
								.Where(p => p.PropertyType.IsClass 
								 && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType)).ToList();

#>		

using FriendStorage.Model;

namespace FriendStorage.UI.Wrapper
{

	public class <#=modelType.Name#>Wrapper : ModelWrapper<<#=modelType.Name#>>
	{
		public <#=modelType.Name#>Wrapper(<#=modelType.Name#> model) : base(model)
		{
		}

<#
	GenerateSimpleProperties(simpleProperties);
	GenerateComplexProperties(complexProperties);
#>

	}

}

<# 
		SaveGeneratedCodeAsFile(modelType.Name + "Wrapper.g.cs");
	}
 #>

<#+ 

private IEnumerable<Type> GetModelTypes()
{
	return typeof(Friend).Assembly.GetTypes();
}

private void SaveGeneratedCodeAsFile(string fileName)
{
	string dir = Path.GetDirectoryName(Host.TemplateFile);
	
	string outputFilePath = Path.Combine(dir, fileName);
	File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());

	GenerationEnvironment.Clear();
}

private void GenerateSimpleProperties(IEnumerable<PropertyInfo> properties)
{
	foreach (var property in properties)
	{
		var propertyType = GetTypeName(property.PropertyType);
		var propertyName = property.Name;
#>
		public <#=propertyType#> <#=propertyName#>
        {
            get
            {
                return GetValue<<#=propertyType#>>();
            }
            set
            {
                SetValue(value);
            }
        }

        public <#=propertyType#> <#=propertyName#>OriginalProperty
        {
            get
            {
                {
                    return GetOriginalValue<<#=propertyType#>>(nameof(<#=propertyName#>));
                }
            }
        }

        public bool <#=propertyName#>IsChanged
        {
            get { return GetIsChanged(nameof(<#=propertyName#>)); }
        }

<#+

	}
}

private void GenerateComplexProperties(IEnumerable<PropertyInfo> properties)
{
	foreach (var property in properties)
	{
		var propertyType = property.PropertyType.Name;
		var propertyName= property.Name;
	#>
 
		public <#= propertyType #>Wrapper <#= propertyName #> { get; private set; }
	<#+   
	}
}

private string GetTypeName(Type type)
{
	if (type.IsGenericType)
	{
		var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
		var typeDefinition = type.GetGenericTypeDefinition().FullName;
		typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
		return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
	}
	else
	{
		return type.FullName;
	}
}

 #>